import * as R from 'ramda';

export const getPhoneById = (state, id) =>
  Object.values(state.phones).filter(phone => phone.id === String(id))[0];

export const getPhones = (state, ownProps) => {
  const activeCategoryId = getActiveCateroryId(ownProps);

  const applySearch = item =>
    R.contains(state.phonesPage.search, R.prop('name', item));

  const applyCategory = item =>
    R.equals(activeCategoryId, R.prop('categoryId', item));

  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids);
  return phones;
};

export const getRenderedPhonesLength = state => state.phonesPage.ids.length;

export const getTotalBasketCount = state => state.basket.length;

export const getTotalBasketPrice = state => {
  const totalPrice = state.basket
    .map(id => getPhoneById(state, id)['price'])
    .reduce((sum, price) => {
      return (sum += price);
    }, 0);
  return totalPrice;
};

export const getCategories = state => Object.values(state.categories);

export const getActiveCateroryId = ownProps =>
  R.path(['match', 'params', 'id'], ownProps);

export const getBasketPhonesWithCount = state => {
  const phoneCount = id =>
    R.compose(
      R.length,
      R.filter(basketId => R.equals(id, basketId))
    )(state.basket);
  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone);
  const uniqueId = R.uniq(state.basket);
  const phones = R.compose(
    R.map(phoneWithCount),
    R.map(id => getPhoneById(state, id))
  )(uniqueId);
  return phones;
};
